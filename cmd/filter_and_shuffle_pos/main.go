package main

import (
	"encoding/csv"
	"flag"
	"fmt"
	"math/rand"
	"os"
	"sort"
	"strings"
)

var (
	inputFilename  string
	outputFilename string
)

func init() {
	flag.StringVar(&inputFilename, "input", "", "filename of the input file generated by the pgn-to-fen.py script")
	flag.StringVar(&outputFilename, "output", "", "name of the output file")
}

func mainWithError() error {
	flag.Parse()
	if inputFilename == "" {
		fmt.Println("input filename missing")
		os.Exit(1)
	}
	if outputFilename == "" {
		fmt.Println("output filename missing")
		os.Exit(1)
	}

	inputFile, err := os.Open(inputFilename)
	if err != nil {
		return err
	}
	defer inputFile.Close()
	csvReader := csv.NewReader(inputFile)

	outputFile, err := os.Create(outputFilename)
	if err != nil {
		return err
	}
	defer outputFile.Close()
	csvWriter := csv.NewWriter(outputFile)
	defer csvWriter.Flush()

	// Read all
	records, err := csvReader.ReadAll()
	if err != nil {
		return err
	}

	// Sort
	sort.Slice(records, func(i, j int) bool {
		return strings.Compare(records[i][0], records[j][0]) < 0
	})

	// Filter duplicates
	newRecords := make([][]string, 0, len(records))
	lastFen := ""
	for _, record := range records {
		if lastFen == record[0] {
			continue
		}
		lastFen = record[0]
		newRecords = append(newRecords, record)
	}

	// Shuffle
	rand.Shuffle(len(newRecords), func(i, j int) { newRecords[i], newRecords[j] = newRecords[j], newRecords[i] })

	// Write all
	return csvWriter.WriteAll(newRecords)
}

func main() {
	err := mainWithError()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
