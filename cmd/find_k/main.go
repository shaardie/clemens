package main

import (
	"encoding/csv"
	"flag"
	"fmt"
	"math"
	"os"
	"strconv"

	"gonum.org/v1/gonum/optimize"
)

var inputFilename string

func init() {
	flag.StringVar(&inputFilename, "input", "", "filename of the input file generated by the score_fen script")
}

func mainWithError() error {
	flag.Parse()
	if inputFilename == "" {
		fmt.Println("input filename missing")
		os.Exit(1)
	}
	inputFile, err := os.Open(inputFilename)
	if err != nil {
		return err
	}
	defer inputFile.Close()
	csvReader := csv.NewReader(inputFile)
	records, err := csvReader.ReadAll()
	if err != nil {
		return err
	}
	rs := make([]float64, len(records))
	qs := make([]int, len(records))

	for i := range records {
		r, err := strconv.ParseFloat(records[i][1], 64)
		if err != nil {
			return err
		}
		rs[i] = r

		q, err := strconv.Atoi(records[i][2])
		if err != nil {
			return err
		}
		qs[i] = q
	}

	problem := optimize.Problem{
		Func: func(x []float64) float64 {
			if len(x) != 1 {
				panic("wrong length")
			}
			var result float64
			for i := 0; i < len(records); i++ {
				result += math.Pow(rs[i]-1/(1+math.Pow(10, -x[0]*float64(qs[i])/400)), 2)
			}
			result /= float64(len(records))
			return result
		},
	}

	res, err := optimize.Minimize(problem, []float64{1}, &optimize.Settings{
		Recorder: optimize.NewPrinter(),
	}, nil)
	if err != nil {
		return err
	}
	fmt.Println(res.Location.X)
	return nil
}

func main() {
	err := mainWithError()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
