package main

import (
	"context"
	"encoding/csv"
	"errors"
	"flag"
	"fmt"
	"io"
	"math"
	"os"

	"github.com/shaardie/clemens/pkg/position"
	"github.com/shaardie/clemens/pkg/search"
	"github.com/shaardie/clemens/pkg/types"
)

var (
	inputFilename  string
	outputFilename string
)

func init() {
	flag.StringVar(&inputFilename, "input", "", "filename of the input file generated by the pgn-to-fen.py or filter_and_shuffle_pos script")
	flag.StringVar(&outputFilename, "output", "", "name of the output file")
}

func mainWithError() error {
	flag.Parse()
	if inputFilename == "" {
		fmt.Println("input filename missing")
		os.Exit(1)
	}
	if outputFilename == "" {
		fmt.Println("output filename missing")
		os.Exit(1)
	}

	inputFile, err := os.Open(inputFilename)
	if err != nil {
		return err
	}
	defer inputFile.Close()
	csvReader := csv.NewReader(inputFile)

	outputFile, err := os.Create(outputFilename)
	if err != nil {
		return err
	}
	defer outputFile.Close()
	csvWriter := csv.NewWriter(outputFile)
	defer csvWriter.Flush()

	s := &search.Search{
		Pos: position.Position{},
		Ctx: context.TODO(),
	}

	l := 0
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return err
		}

		if len(record) != 2 {
			return errors.New("unknown record")
		}

		fen := record[0]
		win := record[1]
		pos, err := position.NewFromFen(fen)
		if err != nil {
			return err
		}
		score, err := s.Quiescence(pos, -math.MaxInt16, math.MaxInt16, 0)
		if err != nil {
			return err
		}
		if pos.SideToMove == types.BLACK {
			score *= -1
		}
		csvWriter.Write([]string{fen, win, fmt.Sprint(score)})
		if l%10000 == 0 {
			fmt.Println(l)
		}
		l++
	}

	return nil
}

func main() {
	err := mainWithError()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
